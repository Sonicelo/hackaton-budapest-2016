<?xml version='1.0' encoding='utf-8'?>
<scheme description="Oscillatory Classification:&#10;Neural oscillations indicate various neural activities or neural states, such as, relaxation, emotions, cognitive processing, and motor control. This pipeline provides the core processing required to extract such neural oscillatory patterns in the context of classification between possible categories or scenarios.&#10;&#10;The main node of this pipeline is the Common Spatial Pattern (CSP) filter, which is used to retrieve the components or patterns in the signal that are most suitable to represent desired categories or classes. CSP and its various extensions (available through NeuroPype) provide a powerful tool for building applications based on neural oscillations. Some of the available CSP algorithms in NeuroPype are: CSP and Filterbank CSP which are mostly targeted for classification algorithms and Source Power Comodulation (SPoC) and Filterbank SPoC which are targeted for regression algorithms.&#10;&#10;This pipeline can be divided into 4 main parts, which we discuss in the following:&#10;Data acquisition:&#10;Includes : Import Data, LSL input/output, Stream Data and Inject Calibration Data nodes&#10;In general you can process your data online or offline. For developing and testing purposes you will be mostly performing offline process using a prerecorded data buffers.&#10;&#10;The “Import Data” node is used to connect the pipeline to data buffers.&#10;&#10;The “LSL input” and “LSL output” nodes are used to get data stream into the pipeline, or send the data out the network from pipeline. (If you are sending markers make sure to check the “send marker” option in “LSL output” node)&#10;&#10;The “Inject Calibration Data” node is used to pass the initial calibration data into the pipeline before the actual data is processed. The calibration data (Calib Data) is used by adaptive and machine learning algorithms to train and set their parameters initially. The main data is connected to the “Streaming Data” port.&#10;&#10;NOTE regarding “Inject Calibration Data”: &#10;In case you would like to train and test your pipeline using data buffers (without using streaming node), you need to set the “Delay streaming packets” in this node. This enables the “Inject Calibration Data” node to buffer the test data that is pushed into it for  one cycle and transfer it to the output port in the next cycle. It should be noted that the first cycle is used to push the calibration data through the pipeline.&#10;&#10;Data preprocess:&#10;Includes: Assign Targets, Select Range,  FIR filter and Segmentation nodes&#10;&#10;The “Assign Target” node is mostly useful for the supervised learning algorithms, where  target values are assigned to specific markers present in the EEG signal. In order for this node to operate correctly you need to know the label for the markers in the data.&#10;&#10;&#10;The “Select Range” node is used to specify certain parts of the data stream. For  example, if we have a headset that contain certain bad channels, you can manually remove them here. That is the case for our example here with data recorded with Cognionics headset that the last 5 channels are not used and are removed.&#10;&#10;The “FIR Filter” node is used to remove the unwanted signals components outside of the EEG signal frequencies, eg keep the 8-28Hz window.&#10;&#10;The “Segmentation” node performs the epoching process, where the streamed data is divided into segments of the pre-defined window-length around the markers on the EEG data.&#10;&#10;NOTE regarding &quot;Segmentation&quot; node:&#10;The epoching process can be either done relative to the marker or the time window. When Processing a big data buffer, you should set the epoching relative to markers and while processing the streaming data, you should set it to sliding which chooses a single window at the end of the data.&#10;&#10;Feature extraction:&#10;&#10;Includes: Filter Bank Common Spatial Patterns (FBCSP) node&#10;As discussed above the spectral and spatial patterns in the data can be extracted by the CSP filters and its extensions. In the FBCSP method, multiple frequency bands can be defined and then desired number of filters are designed for each frequency band. These filters are then applied to the data to extract the features corresponding to model patterns. &#10;You can define the frequency bands of interest for this node. Also, you can choose different windows for frequency calculation in order to avoid the boundary effect.&#10;&#10;Classification:&#10;Includes: Variance, Logarithm, Logistic Regression and Measure Loss&#10;&#10;The “Logistic Regression” node is used to perform the classification, where supervised learning methods is used to train the classifier. You can choose the type of regularization and regularization coefficient, in this node. Also,the number of the folds for cross-validation.&#10;&#10;The “Measure Loss” node is used to measure various performance criteria. For example  you can  use the misclassification rate (MCR) or area under the curve (AUC) etc." title="Oscillatory process classification" version="2.0">
	<nodes>
		<node id="0" name="FIR Filter" position="(600, 300)" project_name="Orange" qualified_name="Orange.widgets.filters.owfirfilter.OWFIRFilter" title="FIR Filter" version="" />
		<node id="1" name="LSL Output" position="(900, 400)" project_name="Orange" qualified_name="Orange.widgets.network.owlsloutput.OWLSLOutput" title="LSL Output" version="" />
		<node id="2" name="Moving Window Multitaper Spectrum" position="(700, 500)" project_name="Orange" qualified_name="Orange.widgets.spectral.owmovingwindowmultitaperspectrum.OWMovingWindowMultitaperSpectrum" title="Moving Window Multitaper Spectrum" version="" />
		<node id="3" name="Spectrum Plot" position="(900, 500)" project_name="Orange" qualified_name="Orange.widgets.visualization.owspectrumplot.OWSpectrumPlot" title="Spectrum Plot" version="" />
		<node id="4" name="Select Range" position="(300, 300)" project_name="Orange" qualified_name="Orange.widgets.general.owselectrange.OWSelectRange" title="Select Range (1)" version="" />
		<node id="5" name="LSL Input" position="(104.0, 430.0)" project_name="Orange" qualified_name="Orange.widgets.network.owlslinput.OWLSLInput" title="LSL Input" version="" />
	</nodes>
	<links>
		<link enabled="true" id="0" sink_channel="Data" sink_node_id="3" source_channel="Data" source_node_id="2" />
		<link enabled="true" id="1" sink_channel="Data" sink_node_id="0" source_channel="Data" source_node_id="4" />
		<link enabled="true" id="2" sink_channel="Data" sink_node_id="2" source_channel="Data" source_node_id="0" />
		<link enabled="true" id="3" sink_channel="Data" sink_node_id="1" source_channel="Data" source_node_id="2" />
		<link enabled="true" id="4" sink_channel="Data" sink_node_id="4" source_channel="Data" source_node_id="5" />
	</links>
	<annotations />
	<thumbnail />
	<node_properties>
		<properties format="pickle" node_id="0">gAN9cQAoWAQAAABtb2RlcQFYCAAAAGJhbmRwYXNzcQJYCgAAAHN0b3BfYXR0ZW5xA0dATgAAAAAA
AFgTAAAAc2F2ZWRXaWRnZXRHZW9tZXRyeXEEY3NpcApfdW5waWNrbGVfdHlwZQpxBVgMAAAAUHlR
dDQuUXRDb3JlcQZYCgAAAFFCeXRlQXJyYXlxB0MuAdnQywABAAAAAAMGAAAAygAABIEAAAJgAAAD
EAAAAO4AAAR3AAACVgAAAAAAAHEIhXEJh3EKUnELWA0AAABtaW5pbXVtX3BoYXNlcQyIWAwAAABv
bmx5X3NpZ25hbHNxDYhYBAAAAGF4aXNxDlgEAAAAdGltZXEPWAsAAABmcmVxdWVuY2llc3EQXXER
KEdAGAAAAAAAAEdAIAAAAAAAAEdAPgAAAAAAAEdAQAAAAAAAAGVYBQAAAG9yZGVycRJOWA0AAABh
bnRpc3ltbWV0cmljcROJdS4=
</properties>
		<properties format="pickle" node_id="1">gAN9cQAoWAwAAABvbmx5X3NpZ25hbHNxAYlYBQAAAHNyYXRlcQJOWAsAAABtYXJrZXJfbmFtZXED
WBYAAABGaWx0ZXJlZFN0cmVhbS1tYXJrZXJzcQRYEwAAAHNhdmVkV2lkZ2V0R2VvbWV0cnlxBWNz
aXAKX3VucGlja2xlX3R5cGUKcQZYDAAAAFB5UXQ0LlF0Q29yZXEHWAoAAABRQnl0ZUFycmF5cQhD
LgHZ0MsAAQAAAAAAPQAAAIsAAAG4AAACVgAAAEcAAACvAAABrgAAAkwAAAAAAABxCYVxCodxC1Jx
DFgJAAAAc291cmNlX2lkcQ1YAAAAAHEOWAsAAABzdHJlYW1fbmFtZXEPWA4AAABmaWx0ZXJlZFN0
cmVhbXEQWAsAAABzdHJlYW1fdHlwZXERWAcAAABDb250cm9scRJYDAAAAHNlbmRfbWFya2Vyc3ET
iFgJAAAAY2h1bmtfbGVucRRLAFgMAAAAbWF4X2J1ZmZlcmVkcRVLPHUu
</properties>
		<properties format="pickle" node_id="2">gAN9cQAoWAgAAABvbmVzaWRlZHEBiFgOAAAAaGFsZl9iYW5kd2lkdGhxAksEWBMAAABzYXZlZFdp
ZGdldEdlb21ldHJ5cQNjc2lwCl91bnBpY2tsZV90eXBlCnEEWAwAAABQeVF0NC5RdENvcmVxBVgK
AAAAUUJ5dGVBcnJheXEGQy4B2dDLAAEAAAAAAuIAAAGyAAAEXQAAAuwAAALsAAAB1gAABFMAAALi
AAAAAAAAcQeFcQiHcQlScQpYDQAAAHdpbmRvd19sZW5ndGhxC0sFWAYAAAB0YXBlcnNxDE5YCgAA
AG51bV90YXBlcnNxDU51Lg==
</properties>
		<properties format="pickle" node_id="3">gAN9cQAoWAkAAABhdXRvc2NhbGVxAYhYFQAAAG9uZV9vdmVyX2ZfY29ycmVjdGlvbnECiFgLAAAA
YW50aWFsaWFzZWRxA4lYCwAAAHN0cmVhbV9uYW1lcQRYAAAAAHEFWAcAAABzdGFja2VkcQaIWA0A
AABhbHdheXNfb25fdG9wcQeJWAoAAAB6ZXJvX2NvbG9ycQhYCQAAACM3RjdGN0Y3RnEJWBMAAABz
YXZlZFdpZGdldEdlb21ldHJ5cQpjc2lwCl91bnBpY2tsZV90eXBlCnELWAwAAABQeVF0NC5RdENv
cmVxDFgKAAAAUUJ5dGVBcnJheXENQy4B2dDLAAEAAAAAA+EAAAHjAAAFSAAAA/wAAAPhAAAB4wAA
BUgAAAP8AAAAAAAAcQ6FcQ+HcRBScRFYBQAAAHRpdGxlcRJYDQAAAFNwZWN0cnVtIHZpZXdxE1gF
AAAAc2NhbGVxFEc/yZmZmZmZmlgLAAAAZG93bnNhbXBsZWRxFYlYDAAAAGluaXRpYWxfZGltc3EW
XXEXWAoAAABsaW5lX2NvbG9ycRhYBwAAACMwMDAwMDBxGVgQAAAAYmFja2dyb3VuZF9jb2xvcnEa
WAcAAAAjRkZGRkZGcRt1Lg==
</properties>
		<properties format="pickle" node_id="4">gAN9cQAoWAkAAABzZWxlY3Rpb25xAV1xAihYAgAAAFA3cQNYAgAAAFAzcQRYAgAAAFB6cQVYAgAA
AFA0cQZYAgAAAFA4cQdYAgAAAE8xcQhYAgAAAE8ycQllWAQAAABheGlzcQpYBQAAAHNwYWNlcQtY
EwAAAHNhdmVkV2lkZ2V0R2VvbWV0cnlxDGNzaXAKX3VucGlja2xlX3R5cGUKcQ1YDAAAAFB5UXQ0
LlF0Q29yZXEOWAoAAABRQnl0ZUFycmF5cQ9DLgHZ0MsAAQAAAAAEOAAAATcAAAWzAAACJAAABEIA
AAFbAAAFqQAAAhoAAAAAAABxEIVxEYdxElJxE1gEAAAAdW5pdHEUWAUAAABuYW1lc3EVdS4=
</properties>
		<properties format="pickle" node_id="5">gAN9cQAoWA0AAABjaGFubmVsX25hbWVzcQFdcQJYDAAAAG1hcmtlcl9xdWVyeXEDWAAAAABxBFgM
AAAAbWF4X2Jsb2NrbGVucQVNAARYDAAAAG1heF9jaHVua2xlbnEGSwBYDAAAAG5vbWluYWxfcmF0
ZXEHTlgLAAAAZGlhZ25vc3RpY3NxCIlYBwAAAHJlY292ZXJxCYhYBQAAAHF1ZXJ5cQpYCgAAAHR5
cGU9J0VFRydxC1gKAAAAbWF4X2J1ZmxlbnEMSx5YEwAAAHNhdmVkV2lkZ2V0R2VvbWV0cnlxDWNz
aXAKX3VucGlja2xlX3R5cGUKcQ5YDAAAAFB5UXQ0LlF0Q29yZXEPWAoAAABRQnl0ZUFycmF5cRBD
LgHZ0MsAAQAAAAAAWwAAAH0AAAHUAAACZwAAAGMAAACcAAABzAAAAl8AAAAAAABxEYVxEodxE1Jx
FFgUAAAAcmVzb2x2ZV9taW5pbXVtX3RpbWVxFUc/4AAAAAAAAHUu
</properties>
	</node_properties>
	<patch>{
    "edges": [
        [
            "node3",
            "data",
            "node4",
            "data"
        ],
        [
            "node3",
            "data",
            "node2",
            "data"
        ],
        [
            "node5",
            "data",
            "node1",
            "data"
        ],
        [
            "node1",
            "data",
            "node3",
            "data"
        ],
        [
            "node6",
            "data",
            "node5",
            "data"
        ]
    ],
    "nodes": {
        "node1": {
            "class": "FIRFilter",
            "module": "neuropype.nodes.filters",
            "params": {
                "antisymmetric": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": false
                },
                "axis": {
                    "customized": false,
                    "type": "EnumPort",
                    "value": "time"
                },
                "frequencies": {
                    "customized": true,
                    "type": "ListPort",
                    "value": [
                        6.0,
                        8.0,
                        30.0,
                        32.0
                    ]
                },
                "minimum_phase": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": true
                },
                "mode": {
                    "customized": false,
                    "type": "EnumPort",
                    "value": "bandpass"
                },
                "only_signals": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": true
                },
                "order": {
                    "customized": false,
                    "type": "IntPort",
                    "value": null
                },
                "stop_atten": {
                    "customized": true,
                    "type": "FloatPort",
                    "value": 60.0
                }
            },
            "uuid": "0f6dca20-9f1e-469f-adfd-456cfb38afa4"
        },
        "node2": {
            "class": "LSLOutput",
            "module": "neuropype.nodes.network",
            "params": {
                "chunk_len": {
                    "customized": false,
                    "type": "IntPort",
                    "value": 0
                },
                "marker_name": {
                    "customized": true,
                    "type": "StringPort",
                    "value": "FilteredStream-markers"
                },
                "max_buffered": {
                    "customized": false,
                    "type": "IntPort",
                    "value": 60
                },
                "only_signals": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": false
                },
                "send_markers": {
                    "customized": true,
                    "type": "BoolPort",
                    "value": true
                },
                "source_id": {
                    "customized": false,
                    "type": "StringPort",
                    "value": ""
                },
                "srate": {
                    "customized": false,
                    "type": "Port",
                    "value": null
                },
                "stream_name": {
                    "customized": true,
                    "type": "StringPort",
                    "value": "filteredStream"
                },
                "stream_type": {
                    "customized": false,
                    "type": "StringPort",
                    "value": "Control"
                }
            },
            "uuid": "f79ae722-25d7-49a7-8995-51499633baba"
        },
        "node3": {
            "class": "MovingWindowMultitaperSpectrum",
            "module": "neuropype.nodes.spectral",
            "params": {
                "half_bandwidth": {
                    "customized": true,
                    "type": "FloatPort",
                    "value": 4
                },
                "num_tapers": {
                    "customized": false,
                    "type": "IntPort",
                    "value": null
                },
                "onesided": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": true
                },
                "tapers": {
                    "customized": false,
                    "type": "Port",
                    "value": null
                },
                "window_length": {
                    "customized": true,
                    "type": "FloatPort",
                    "value": 5
                }
            },
            "uuid": "2dc2aae9-999e-4e4e-ae6f-b7e5477bc9cb"
        },
        "node4": {
            "class": "SpectrumPlot",
            "module": "neuropype.nodes.visualization",
            "params": {
                "always_on_top": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": false
                },
                "antialiased": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": false
                },
                "autoscale": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": true
                },
                "background_color": {
                    "customized": false,
                    "type": "StringPort",
                    "value": "#FFFFFF"
                },
                "downsampled": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": false
                },
                "initial_dims": {
                    "customized": false,
                    "type": "ListPort",
                    "value": []
                },
                "line_color": {
                    "customized": false,
                    "type": "StringPort",
                    "value": "#000000"
                },
                "one_over_f_correction": {
                    "customized": true,
                    "type": "BoolPort",
                    "value": true
                },
                "scale": {
                    "customized": true,
                    "type": "FloatPort",
                    "value": 0.2
                },
                "stacked": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": true
                },
                "stream_name": {
                    "customized": false,
                    "type": "StringPort",
                    "value": ""
                },
                "title": {
                    "customized": false,
                    "type": "StringPort",
                    "value": "Spectrum view"
                },
                "zero_color": {
                    "customized": false,
                    "type": "StringPort",
                    "value": "#7F7F7F7F"
                }
            },
            "uuid": "039e1903-b4f1-4207-a2db-d31f70ec4dfc"
        },
        "node5": {
            "class": "SelectRange",
            "module": "neuropype.nodes.general",
            "params": {
                "axis": {
                    "customized": true,
                    "type": "EnumPort",
                    "value": "space"
                },
                "selection": {
                    "customized": true,
                    "type": "Port",
                    "value": [
                        "P7",
                        "P3",
                        "Pz",
                        "P4",
                        "P8",
                        "O1",
                        "O2"
                    ]
                },
                "unit": {
                    "customized": true,
                    "type": "EnumPort",
                    "value": "names"
                }
            },
            "uuid": "e9f6c7c1-8d19-4b4d-ad69-0b73fc28b1f9"
        },
        "node6": {
            "class": "LSLInput",
            "module": "neuropype.nodes.network",
            "params": {
                "channel_names": {
                    "customized": true,
                    "type": "Port",
                    "value": []
                },
                "diagnostics": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": false
                },
                "marker_query": {
                    "customized": false,
                    "type": "StringPort",
                    "value": ""
                },
                "max_blocklen": {
                    "customized": false,
                    "type": "IntPort",
                    "value": 1024
                },
                "max_buflen": {
                    "customized": false,
                    "type": "IntPort",
                    "value": 30
                },
                "max_chunklen": {
                    "customized": false,
                    "type": "IntPort",
                    "value": 0
                },
                "nominal_rate": {
                    "customized": false,
                    "type": "Port",
                    "value": null
                },
                "query": {
                    "customized": false,
                    "type": "StringPort",
                    "value": "type='EEG'"
                },
                "recover": {
                    "customized": false,
                    "type": "BoolPort",
                    "value": true
                },
                "resolve_minimum_time": {
                    "customized": false,
                    "type": "FloatPort",
                    "value": 0.5
                }
            },
            "uuid": "c6481042-c250-474f-8715-4098a2da95f5"
        }
    },
    "version": 1.1
}</patch>
</scheme>
